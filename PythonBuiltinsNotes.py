# ğŸ“˜ Python YerleÅŸik Fonksiyonlar ve Listeler Ãœzerine Notlar

## ğŸ“‘ Ä°Ã§indekiler
1. enumerate()
2. any() ve all()
3. zip()
4. String to list comprehension
5. *args ve **kwargs
6. map()
7. lambda
8. filter()
9. random modÃ¼lÃ¼
10. Liste MetodlarÄ± (list methods)
11. SÃ¶zlÃ¼k (dict) MetodlarÄ±
12. KÃ¼me (set) MetodlarÄ±
13. DiÄŸer KullanÄ±ÅŸlÄ± Fonksiyonlar: sorted(), reversed(), len(), type(), isinstance()

---

## 1. enumerate()
Bir listedeki elemanlarÄ±n **indeksleriyle birlikte** alÄ±nmasÄ±nÄ± saÄŸlar. DÃ¶ngÃ¼lerde Ã§ok kullanÄ±lÄ±r. Genellikle `tuple` olarak (index, deÄŸer) ÅŸeklinde eleman verir.

```python
liste = ["furkan", "ali", "mehmet", "sadÄ±k", "berk", "katip"]
x = list(enumerate(liste, start=1))
print(x)

for (i, isim) in x:
    print(f"SÄ±rasÄ±: {i} Kendisi: {isim}")
```

## 2. any() ve all()
- `any(iterable)` â†’ iterable iÃ§indeki **en az bir** eleman `True` ise `True` dÃ¶ner.
- `all(iterable)` â†’ iterable iÃ§indeki **tÃ¼m elemanlar** `True` ise `True` dÃ¶ner.

```python
print(any(x % 2 == 0 for x in range(10)))  # True
print(all(x > 0 for x in [1, 2, 3]))       # True
```

## 3. zip()
Birden fazla listeyi **indeks bazlÄ± eÅŸleÅŸtirerek** `tuple` ÅŸeklinde gruplayan fonksiyondur.

```python
liste1 = [1, 2, 3, 4, 5]
liste2 = [1.1, 2.2, 3.3, 4.4, 5.5]
z = list(zip(liste1, liste2))
print(z)  # [(1, 1.1), (2, 2.2), ...]
```

## 4. String to list comprehension:
```python
s = "furkan"
string_listesi = [karakter for karakter in s]
print(string_listesi)  # ['f', 'u', 'r', 'k', 'a', 'n']
```

## 5. *args ve **kwargs
- `*args` â†’ fonksiyona **istediÄŸin kadar pozisyonel argÃ¼man** gÃ¶nder.
- `**kwargs` â†’ fonksiyona **istediÄŸin kadar anahtar=deÄŸer Ã§ifti** gÃ¶nder.

```python
def deneme(*notlar):
    toplam = sum(notlar)
    print(f"{notlar} toplamÄ±: {toplam}")

deneme(90, 10, 20)


def selam(**kiÅŸiler):
    for isim, yaÅŸ in kiÅŸiler.items():
        print(f"{isim} {yaÅŸ} yaÅŸÄ±nda")

selam(ali=25, ayÅŸe=22)
```

## 6. map()
Belirli bir fonksiyonu bir listedeki **her elemana** uygular.

```python
sayÄ±lar = [2, 4, 6, 8, 9]
kareler = list(map(lambda x: x * x, sayÄ±lar))
print(kareler)
```

## 7. lambda fonksiyonu
**Tek satÄ±rlÄ±k fonksiyon** oluÅŸturmak iÃ§in kullanÄ±lÄ±r.
```python
kare = lambda x: x * x
print(kare(5))
```

## 8. filter()
Bir fonksiyona gÃ¶re **True dÃ¶nen elemanlarÄ±** listeler.

```python
sayÄ±lar = [32, 43, 546, 65, 76, 68, 78]
Ã§iftler = list(filter(lambda x: x % 2 == 0, sayÄ±lar))
print(Ã§iftler)
```

## 9. random modÃ¼lÃ¼:
```python
from random import shuffle, choice, randint

liste = [1, 2, 3, 4, 5]
shuffle(liste)         # Listeyi karÄ±ÅŸtÄ±rÄ±r
print(choice(liste))   # Listeden rastgele bir eleman seÃ§er
print(randint(0, 5))   # 0 ile 5 arasÄ±nda rastgele sayÄ± Ã¼retir
```

## 10. Liste Ä°ÅŸlemleri (List Methods)
```python
liste1 = [1, 2, 3]
liste2 = [4, 5, 6]
print(liste1 + liste2)      # Listeleri birleÅŸtirir
print(liste1 * 2)           # Listeyi tekrarlar

liste1.append(10)           # Sona ekler
liste1.insert(1, 99)        # Belirtilen indexe ekler

liste_kopya = liste1.copy()  # Listeyi kopyalar

liste1.remove(2)            # Belirtilen elemanÄ± siler
del liste1[0]               # Belirtilen indexteki elemanÄ± siler

print(3 in liste1)          # 3 elemanÄ± var mÄ±?

print(liste1.index(10))     # 10 elemanÄ±nÄ±n indexi

print(min(liste1))          # Minimum
print(max(liste1))          # Maksimum
print(sum(liste1))          # Toplam

liste1.sort()               # KÃ¼Ã§Ã¼kten bÃ¼yÃ¼ÄŸe sÄ±ralar
liste1.sort(reverse=True)   # BÃ¼yÃ¼kten kÃ¼Ã§Ã¼ÄŸe sÄ±ralar

liste1.pop()                # Sondaki elemanÄ± siler
print(liste1.count(99))     # 99 kaÃ§ defa var?

liste1.clear()              # TÃ¼m elemanlarÄ± siler
```

## 11. SÃ¶zlÃ¼k (dict) MetodlarÄ±
```python
d = {"a": 1, "b": 2, "c": 3}
print(d.keys())      # dict_keys(['a', 'b', 'c'])
print(d.values())    # dict_values([1, 2, 3])
print(d.items())     # dict_items([('a', 1), ('b', 2), ('c', 3)])
print(d.get("b"))    # 2

print("a" in d)       # True
print(len(d))        # 3

kopya = d.copy()
d.pop("b")
print(d)
d.update({"z": 99})
```

## 12. KÃ¼me (set) MetodlarÄ±
```python
kume = {1, 2, 3}
kume.add(4)
kume.remove(2)
kume.discard(10)  # Eleman yoksa hata vermez
kume2 = {3, 4, 5}

print(kume.union(kume2))        # BirleÅŸim
print(kume.intersection(kume2)) # KesiÅŸim
print(kume.difference(kume2))   # Fark
```

## 13. DiÄŸer KullanÄ±ÅŸlÄ± Fonksiyonlar
```python
liste = [5, 2, 9, 1]
sÄ±ralÄ± = sorted(liste)        # Listeyi sÄ±ralar ama orijinalini bozmaz
ters = list(reversed(liste)) # Listeyi ters Ã§evirir
print(len(liste))            # Eleman sayÄ±sÄ±
print(type(liste))           # Tipini verir
print(isinstance(liste, list))  # liste mi?
```

---
